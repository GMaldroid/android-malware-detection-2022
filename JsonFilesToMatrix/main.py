import os
import json
import pandas as pd
import numpy as np
from functools import reduce
from path import Path


### Create App Api matrix shape(300,300)
def list_files(path: str):
    return [f'{path}/{f}' for f in os.listdir(path)]


def create_app_api(top_apis: str, save_path: str):
    '''
    top_apis
    '''
    # api_dataset_path: list top 400 apis
    api_dataset = json.load(open(top_apis, "r"))["data"]

    def create_row(file: str, label: str):
        content = json.load(open(file, "r"))["data"]
        result = np.zeros((len(api_dataset)), dtype=int)

        for method in content:
            for api_call in method["api"]:
                if api_call["full_api_call"] in api_dataset:
                    result[api_dataset.index(api_call["full_api_call"])] = 1
        result = result.tolist()
        result.append(label)
        return result
    
    result = []
    result.append(list(map(lambda x: create_row(x, "Adware"), list_files("./input/Adware_300"))))
    result.append(list(map(lambda x: create_row(x, "Banking"), list_files("./input/Banking_300"))))
    result.append(list(map(lambda x: create_row(x, "Benign"), list_files("./input/Benign_300"))))
    result.append(list(map(lambda x: create_row(x, "Riskware"), list_files("./input/Riskware_300"))))
    result.append(list(map(lambda x: create_row(x, "Smsmalware"), list_files("./input/SMS_300"))))
    matrix = list(reduce(lambda x, y: np.concatenate((x, y)), result))

    api_dataset.append("Label")

    pd.DataFrame(matrix, columns=api_dataset).to_csv(save_path)
    return matrix


def save_int_csv(path, obj):
    np.savetxt(path, obj, fmt='%d', delimiter=',')


### Create invoke matrix
def create_invoke(top_apis: str):
    api_dataset = json.load(open(top_apis, "r"))["data"]
    invoke_matrix = np.zeros((len(api_dataset), len(api_dataset)), dtype=np.int32)

    def process(app):
        print(app)
        invoke_static = set()
        invoke_virtual = set()
        invoke_direct = set()
        invoke_super = set()
        invoke_interface = set()
        data = json.load(open(app, "r"))["data"]
        for method in data:
            apis = method["api"]
            for api in apis:
                if api["full_api_call"] in api_dataset:
                    invoke = api["invoke"]
                    if invoke == 'invoke-static':
                        invoke_static.add(api_dataset.index(api["full_api_call"]))
                    elif invoke == 'invoke-virtual':
                        invoke_virtual.add(api_dataset.index(api["full_api_call"]))
                    elif invoke == 'invoke-direct':
                        invoke_direct.add(api_dataset.index(api["full_api_call"]))
                    elif invoke == 'invoke-super':
                        invoke_super.add(api_dataset.index(api["full_api_call"]))
                    elif invoke == 'invoke-interface':
                        invoke_interface.add(api_dataset.index(api["full_api_call"]))
        all_type = []
        all_type.append(invoke_static)
        all_type.append(invoke_virtual)
        all_type.append(invoke_direct)
        all_type.append(invoke_super)
        all_type.append(invoke_interface)

        return all_type

    result = []
    result = np.concatenate((result, list_files("./input/Adware_300")))
    result = np.concatenate((result, list_files("./input/Banking_300")))
    result = np.concatenate((result, list_files("./input/Benign_300")))
    result = np.concatenate((result, list_files("./input/Riskware_300")))
    result = np.concatenate((result, list_files("./input/SMS_300")))
    apps = list(map(process, result))
    
    for i, app in enumerate(apps):
        for type in app:
            type = list(type)
            for i in range(len(type)):
                for j in range(i, len(type)):
                    invoke_matrix[type[i]][type[j]] = 1

    pd.DataFrame(invoke_matrix, index=api_dataset, columns=api_dataset).to_csv('./output/invoke.csv')


### Create method matrix
def create_method(top_apis: str):
    api_dataset = json.load(open(top_apis, "r"))["data"]
    method_matrix = np.zeros((len(api_dataset), len(api_dataset)), dtype=np.int32)

    def process(app: str):
        in_app = []
        data = json.load(open(app, "r"))["data"]
        for method in data:
            buffer = []
            apis = method["api"]
            for api in apis:
                if api["full_api_call"] in api_dataset:
                    buffer.append(api_dataset.index(api["full_api_call"]))
            in_app.append(buffer)
        return in_app

    result = []
    result = np.concatenate((result, list_files("./input/Adware_300")))
    result = np.concatenate((result, list_files("./input/Banking_300")))
    result = np.concatenate((result, list_files("./input/Benign_300")))
    result = np.concatenate((result, list_files("./input/Riskware_300")))
    result = np.concatenate((result, list_files("./input/SMS_300")))
    
    apps = list(map(process, result))
    for i, app in enumerate(apps):
        for buffer in app:
            for i in range(len(buffer)):
                for j in range(i, len(buffer)):
                    method_matrix[buffer[i]][buffer[j]] = 1

    pd.DataFrame(method_matrix, columns=api_dataset).to_csv('./output/method.csv')


### Create package matrix
def create_package(top_apis: str):
    api_dataset = json.load(open(top_apis, "r"))["data"]
    package_matrix = np.zeros((len(api_dataset), len(api_dataset)), dtype=np.int32)
    for api_i in range(len(api_dataset)):
        package_matrix[api_i][api_i] = 1
        for api_j in range(api_i + 1, len(api_dataset)):
            if api_dataset[api_i][:api_dataset[api_i].index(';->')] == api_dataset[api_j][
                                                                        :api_dataset[api_j].index(';->')]:
                package_matrix[api_i][api_j] = 1
                package_matrix[api_j][api_i] = 1
    
    pd.DataFrame(package_matrix, index=api_dataset, columns=api_dataset).to_csv("./output/package.csv")


def create_custom_path_sim(base_dir):
    app_api = pd.read_csv(f'{base_dir}/app_api_300.csv', index_col=0, header=0)
    label = app_api.pop('Label')
    app_api = app_api.to_numpy()
    invoke = pd.read_csv(f"{base_dir}/invoke.csv", index_col=0, header=0).to_numpy()
    package = pd.read_csv(f"{base_dir}/package.csv", index_col=0, header=0).to_numpy()
    method = pd.read_csv(f"{base_dir}/method.csv", index_col=0, header=0).to_numpy()

    agvSim = Path(app_api, invoke, package, method)

    print("m1")
    save_int_csv(f"{base_dir}/m1.csv", agvSim.meta_path_1())
    print("m2")
    save_int_csv(f"{base_dir}/m2.csv", agvSim.meta_path_2())
    print("m3")
    save_int_csv(f"{base_dir}/m3.csv", agvSim.meta_path_3())
    print("m4")
    save_int_csv(f"{base_dir}/m4.csv", agvSim.meta_path_4())


if __name__ == '__main__':
    # create_app_api('./input/top_400_apis.json', './output/app_api_300.csv')
    # create_invoke('./input/top_400_apis.json')
    create_method('./input/top_400_apis.json')
    # create_package('./input/top_400_apis.json')
    create_custom_path_sim('./output')
