import os
import pickle
import time
import streamlit as st
import torch
from joblib import dump, load
from graphsage_model import GraphSageModel


dataset_m1 = torch.load(f'static/full_dataset_{400}_m1.pt')
dataset_m2 = torch.load(f'static/full_dataset_{400}_m2.pt')
dataset_m3 = torch.load(f'static/full_dataset_{400}_m3.pt')
dataset_m4 = torch.load(f'static/full_dataset_{400}_m4.pt')
encoder = load('static/encoder_400.joblib')
# print(encoder)

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = GraphSageModel().to(device)
model.load_state_dict(torch.load(f'static/model_{400}.pth', map_location=device))


if __name__ == '__main__':
    st.set_page_config(page_title='APK Malware Detection')
    st.sidebar.image('static/images/LogoHVKTMM.png')
    st.sidebar.title("Upload APK File")
    # st.set_option('deprecation.showfileUploaderEncoding', False)
    uploaded_file = st.sidebar.file_uploader(" ")
    if uploaded_file:
        with open(f'/tmp/{uploaded_file.name}', "wb") as f:
            f.write(uploaded_file.getbuffer())
        start_decompile = time.time()
        os.system(f"apktool d /tmp/{uploaded_file.name} -o /tmp/decompile -f")
        end_decompile = time.time()
        st.success(f"Completely saved and decompiled, {end_decompile - start_decompile:.2f}s")

        # start = time.time()
        # print(f'{time.strftime("%d-%m-%Y:%H:%M:%S")} - {uploaded_file.name} - {model.predict(app_decompile)[0]}')
        # end = time.time()
        # st.write(f'Time create feature vector and predict: {end - start}')
    else:
        st.sidebar.write("Please upload an apk file")
