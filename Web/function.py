import re
import os
import numpy as np
from collections import defaultdict


def list_smali_file(path):
    list_smali = []
    for root, _, filenames in os.walk(path):
        for filename in filenames:
            if filename.endswith('.smali'):
                list_smali.append(os.path.join(root, filename))
    return list_smali


def cut_to_special_element_of_api(a):
    try:
        invoke = a[:a.find(' ')]
        api = a[a.index('}, ') + 3:a.index('->') + 2]
        for i in range(a.index(';->') + 3, len(a)):
            if not (a[i].isalpha() or a[i] == '<' or a[i] == '>'):
                break
            api = api + a[i]
        return [api, invoke, api[:api.find('->')]]
    except ValueError:
        return ['']


def extract_api(api_dataset, path):
    data = defaultdict(lambda: [])
    for a in api_dataset:
        data[a] = [[], [], '']
    for smaliFile in list_smali_file(path):
        try:
            file_content = open(smaliFile, "r").readlines()
            pass
        except IOError:
            pass
        else:
            i = 0
            while i < len(file_content):
                if re.search(r'^.method', file_content[i]):
                    method_name = file_content[i][:file_content[i].find('(')]
                    while i < len(file_content) and not re.search(r'^.end method', file_content[i]):
                        file_content[i] = file_content[i].strip()
                        if re.search(r'^invoke', file_content[i]):
                            a = cut_to_special_element_of_api(file_content[i])
                            if a[0] in api_dataset:
                                if a[1] not in data[a[0]][0]:
                                    data[a[0]][0].append(a[1])
                                if a[2] not in data[a[0]][1]:
                                    data[a[0]][1].append(method_name)
                                data[a[0]][2] = a[2]
                        i = i + 1
                i = i + 1
    data['label'] = 0
    return dict(data)


def create_app_api_vector(extract_data):
    api_dataset = list(extract_data.keys())[:-1]
    row = []
    for api in api_dataset:
        row.append(1 if extract_data[api][0] else 0)
    return np.array([row])
