import pandas as pd
import numpy as np
import torch
from torch_geometric.data import Data
from torch_geometric.nn import GCNConv, SAGEConv, GraphConv
import torch.nn.functional as F


X_test = pd.read_csv('./input/app_api_14632.csv', header=0, index_col='Unnamed: 0').head(5)
y_test = X_test.pop('Label')
x_test = X_test.to_numpy()
edge_index_max = 1500
number_of_new_nodes = x_test.shape[0]

X_train = pd.read_csv('./input/app_api_300.csv', header=0, index_col='Unnamed: 0')
y_train = X_train.pop('Label')
x_train = X_train.to_numpy()

edge_weight = torch.tensor(x_test @ x_train.T)

new_node_index = []
for i in range(number_of_new_nodes):
    new_node_index.extend([edge_index_max + i] * edge_index_max)

edge_index = torch.tensor([
    [i for i in range(edge_index_max)] * number_of_new_nodes,
    new_node_index
])

data = Data(x=torch.from_numpy(x_test).float(), edge_index=edge_index, weight=edge_weight.flatten())

class GCN(torch.nn.Module):
    def __init__(self):
        super().__init__()
        # self.conv1 = SAGEConv(-1, 64, normalize=True)
        # self.conv2 = SAGEConv(-1, dataset.num_classes, normalize=True)
        self.conv1 = GraphConv(-1, 32, aggr='mean', normalize=True)
        self.conv2 = GraphConv(-1, 5, aggr='mean', normalize=True)

    def forward(self, data):
        x, edge_index, weight = data.x, data.edge_index, data.edge_weight
        x = self.conv1(x, edge_index, weight)
        x = F.relu(x)
        x = F.dropout(x, training=self.training)
        x = self.conv2(x, edge_index, weight)
        return F.log_softmax(x, dim=1)


model = GCN()
model.load_state_dict(torch.load("./output/model_300.pth"))
model.eval()

out = model(data).argmax(dim=1)
print(out)
