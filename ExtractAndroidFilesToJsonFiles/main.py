import os
import json
import numpy as np
from functools import reduce
from typing import List
from android_api import AndroidAPI


def decompile_apk(apk_path):
    os.system(f"apktool d {apk_path} -o /tmp/apk_decompile -f")


def get_smali_files(path: str):
    _smali_files = []
    for root, _, filenames in os.walk(path):
        for filename in filenames:
            if filename.endswith('.smali'):
                _smali_files.append(os.path.join(root, filename))
    return _smali_files


def process_content(content: List[str]):
    retval = []
    list_api = []
    method = ''

    for line in content:
        if line.startswith('.method'):
            method = line[:line.find('(')]
            list_api = []
            continue

        if line.startswith('.end method'):
            retval.append({
                "method": method,
                "api": list_api
            })
            method = ''
            list_api = []
            continue

        api = AndroidAPI.parse_android(line)
        if method != '' and api.is_api:
            list_api.append(api.to_dict())

    return retval


file_name = 'apk.2d060afc6a05ba6b8d33ba9a58a944fc'
decompile_apk(f'input/{file_name}')
smali_files = get_smali_files('/tmp/apk_decompile')
contents = list(map(lambda x: open(x).readlines(), smali_files))
contents = list(map(process_content, contents))
contents = list(reduce(lambda a, b: np.concatenate((a, b)), contents))
contents = {
    "file_name": file_name,
    "type": 'adware',
    "data": contents
}
open(f"./output/{file_name}.json", "w").write(json.dumps(contents, indent=4))
os.system('rm -rf /tmp/apk_decompile')
